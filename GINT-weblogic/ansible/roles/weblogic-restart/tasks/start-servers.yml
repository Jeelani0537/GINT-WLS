- name: Start NodeManager
  shell: "cd /opt/oracle/domains{{ fmw_version }}/{{ item }}/nodemanager && nohup ./startNm.sh 1>&2 >> /opt/oracle/domains{{ fmw_version }}/{{ item }}/nodemanager/logs/nodemanager.log &"
  with_items:
  - "{{ domains.split(',') }}"

- name: Validate nodemanager lock file availability
  stat:
    path: "/opt/oracle/domains{{ fmw_version }}/{{ item }}/nodemanager/logs/nodemanager.log.lck"
  register: nmlockstatus
  failed_when: not nmlockstatus.stat.exists
  with_items:
  - "{{ domains.split(',') }}"

- name: Start AdminServer
  shell: "cd /opt/oracle/domains{{ fmw_version }}/{{ item[0] }} && ./start_AdminServer_WithNodeManager.sh"
  when: item[1] is search('Admin')
  with_nested:
  - "{{ domains.split(',') }}"
  - "{{ servers.split(',') }}"

- name: Start managed servers
  shell: "cd /opt/oracle/domains{{ fmw_version }}/{{ item[0] }} && ./start_{{ item[1] }}_WithNodeManager.sh"
  when: item[1] is not search('Admin')
  with_nested:
  - "{{ domains.split(',') }}"
  - "{{ servers.split(',') }}"

- name: "Validate server status from log file"
  wait_for: 
    search_regex: "Server state changed to RUNNING"
    path: "/u01/app/oracle/admin/logs/{{ item[0] }}/{{ item[1] }}/{{ item[1] }}.log"
    delay: 10
    timeout: 300
    msg: "{{ item[1] }} failed to start in 300 secs"
  with_nested:
  - "{{ domains.split(',') }}"
  - "{{ servers.split(',') }}"
  
- name: "Validate if soa platform has loaded"
  wait_for: 
    search_regex: "SOA Platform is running and accepting requests"
    path: "/u01/app/oracle/admin/logs/{{ item[0] }}/{{ item[1] }}/{{ item[1] }}.log"
    delay: 10
    timeout: 300
    msg: "soa platform failed to load on {{ item[1] }} within 300 secs after start-up"  
  when: "'soa_server' in item[1]"
  with_nested:
  - "{{ domains.split(',') }}"
  - "{{ servers.split(',') }}"
