- name: Certificate Validity Check
  hosts: all
  gather_facts: no
  vars_files:
  - ../group_vars/global.yml
  tasks:
  - block:
    - name: Copy Certificate Validity Checks to Servers
      copy:
        src: "../../shell-scripts/certificate-validity-check.sh"
        dest: "/opt/oracle/scripts"
        mode: '0775'
#Execute the shell script for the certificate Checks
    - name: Execute Shell Script for the Certificate Checks
      shell: "/opt/oracle/scripts/certificate-validity-check.sh --keystore /oitp_*/*/keystores/CustomTrust.jks --password 'I_aON!W_W6N4HD01z' > /tmp/Certificate_Output"
      register: Certificate_valid
    #- debug:
        #msg: "{{ Certificate_valid }}"
#Filter the warning and Critical Messages from the output
    - name: Assign date
      shell: "date +%m%d%Y%H%M%S"
      register: datetoday
      run_once: true
    - name: Filter the warning and critical messages
      shell: grep -E 'CRITICAL|WARNING'  /tmp/Certificate_Output | awk -F ":" '{print $1" " $2" "  $3" "  $4}'
      register: Certificate_Out
    - name: Collating output into single file
      shell: echo -e "\n {{ inventory_hostname }} \n {{ Certificate_Out.stdout }} " >> "/tmp/Certificate_Out.txt"
      delegate_to: localhost
      become: false
    - debug:
        msg: "{{ Certificate_Out.stdout_lines }}"
    when: servers is search('AdminServer')
  - block:
    - name: Copy files to one of the servers
      copy:
        src: "/tmp/Certificate_Out.txt"
        dest: /tmp/
    #- name: Collate files into the single file.
      #shell: |
            #cat "/tmp/Certificate_Out_.txt" >> "/tmp/Certificate_Final_Out"
    - name: Send the collated file as mail
      shell: "cat /tmp/Certificate_Out.txt | mail -s Certificate_Validity_Check -r {{ ansible_tower_mail_id }}@`hostname -d` {{ email_ids }}"
    - name: Delete the files from the remote server
      file:
        path: "/tmp/Certificate_Out.txt"
        state: absent
    - name: Delete the files from Ansible server
      file:
        path: "/tmp/Certificate_Out.txt"
        state: absent
      delegate_to: localhost
      become: false
    run_once: true